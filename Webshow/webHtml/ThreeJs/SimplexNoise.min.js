var SimplexNoise = function (t) { null == t && (t = Math), this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]], this.grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]], this.p = []; for (var i = 0; i < 256; i++)this.p[i] = Math.floor(256 * t.random()); this.perm = []; for (i = 0; i < 512; i++)this.perm[i] = this.p[255 & i]; this.simplex = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]] }; SimplexNoise.prototype.dot = function (t, i, r) { return t[0] * i + t[1] * r }, SimplexNoise.prototype.dot3 = function (t, i, r, o) { return t[0] * i + t[1] * r + t[2] * o }, SimplexNoise.prototype.dot4 = function (t, i, r, o, s) { return t[0] * i + t[1] * r + t[2] * o + t[3] * s }, SimplexNoise.prototype.noise = function (t, i) { var r, o = (t + i) * (.5 * (Math.sqrt(3) - 1)), s = Math.floor(t + o), h = Math.floor(i + o), e = (3 - Math.sqrt(3)) / 6, p = (s + h) * e, a = t - (s - p), m = i - (h - p), d = m < a ? (r = 1, 0) : (r = 0, 1), o = a - r + e, t = m - d + e, i = a - 1 + 2 * e, p = m - 1 + 2 * e, e = 255 & s, s = 255 & h, h = this.perm[e + this.perm[s]] % 12, d = this.perm[e + r + this.perm[s + d]] % 12, e = this.perm[1 + e + this.perm[1 + s]] % 12, s = .5 - a * a - m * m, a = s < 0 ? 0 : (s *= s) * s * this.dot(this.grad3[h], a, m), m = .5 - o * o - t * t, o = m < 0 ? 0 : (m *= m) * m * this.dot(this.grad3[d], o, t), t = .5 - i * i - p * p, p = t < 0 ? 0 : (t *= t) * t * this.dot(this.grad3[e], i, p); return 70 * (a + o + p) }, SimplexNoise.prototype.noise3d = function (t, i, r) { var o, s, h, e, p = (t + i + r) * (1 / 3), a = Math.floor(t + p), m = Math.floor(i + p), d = Math.floor(r + p), n = 1 / 6, l = (a + m + d) * n, f = t - (a - l), M = i - (m - l), u = r - (d - l), g = M <= f ? u <= M ? (e = h = o = 1, y = s = 0) : h = u <= f ? (e = y = s = 0, o = 1) : (e = s = o = 0, y = 1) : M < u ? (h = s = o = 0, e = y = 1) : f < u ? (h = y = o = 0, e = s = 1) : (e = h = s = 1, y = o = 0), x = f - o + n, c = M - s + n, N = u - y + n, S = f - h + 2 * n, p = M - e + 2 * n, t = u - g + 2 * n, i = f - 1 + .5, r = M - 1 + .5, l = u - 1 + .5, n = 255 & a, a = 255 & m, m = 255 & d, d = this.perm[n + this.perm[a + this.perm[m]]] % 12, y = this.perm[n + o + this.perm[a + s + this.perm[m + y]]] % 12, g = this.perm[n + h + this.perm[a + e + this.perm[m + g]]] % 12, a = this.perm[1 + n + this.perm[1 + a + this.perm[1 + m]]] % 12, m = .6 - f * f - M * M - u * u, M = m < 0 ? 0 : (m *= m) * m * this.dot3(this.grad3[d], f, M, u), u = .6 - x * x - c * c - N * N, c = u < 0 ? 0 : (u *= u) * u * this.dot3(this.grad3[y], x, c, N), N = .6 - S * S - p * p - t * t, p = N < 0 ? 0 : (N *= N) * N * this.dot3(this.grad3[g], S, p, t), t = .6 - i * i - r * r - l * l, l = t < 0 ? 0 : (t *= t) * t * this.dot3(this.grad3[a], i, r, l); return 32 * (M + c + p + l) }, SimplexNoise.prototype.noise4d = function (t, i, r, o) { var s = this.grad4, h = this.simplex, e = this.perm, p = (Math.sqrt(5) - 1) / 4, a = (5 - Math.sqrt(5)) / 20, m = (t + i + r + o) * p, d = Math.floor(t + m), n = Math.floor(i + m), l = Math.floor(r + m), f = Math.floor(o + m), M = (d + n + l + f) * a, u = t - (d - M), g = i - (n - M), x = r - (l - M), c = o - (f - M), N = (g < u ? 32 : 0) + (x < u ? 16 : 0) + (x < g ? 8 : 0) + (c < u ? 4 : 0) + (c < g ? 2 : 0) + (c < x ? 1 : 0), S = 3 <= h[N][0] ? 1 : 0, y = 3 <= h[N][1] ? 1 : 0, v = 3 <= h[N][2] ? 1 : 0, q = 3 <= h[N][3] ? 1 : 0, b = 2 <= h[N][0] ? 1 : 0, j = 2 <= h[N][1] ? 1 : 0, k = 2 <= h[N][2] ? 1 : 0, w = 2 <= h[N][3] ? 1 : 0, z = 1 <= h[N][0] ? 1 : 0, A = 1 <= h[N][1] ? 1 : 0, B = 1 <= h[N][2] ? 1 : 0, C = 1 <= h[N][3] ? 1 : 0, D = u - S + a, E = g - y + a, F = x - v + a, G = c - q + a, H = u - b + 2 * a, I = g - j + 2 * a, J = x - k + 2 * a, p = c - w + 2 * a, m = u - z + 3 * a, t = g - A + 3 * a, i = x - B + 3 * a, r = c - C + 3 * a, o = u - 1 + 4 * a, M = g - 1 + 4 * a, h = x - 1 + 4 * a, N = c - 1 + 4 * a, a = 255 & d, d = 255 & n, n = 255 & l, l = 255 & f, f = e[a + e[d + e[n + e[l]]]] % 32, q = e[a + S + e[d + y + e[n + v + e[l + q]]]] % 32, w = e[a + b + e[d + j + e[n + k + e[l + w]]]] % 32, C = e[a + z + e[d + A + e[n + B + e[l + C]]]] % 32, e = e[1 + a + e[1 + d + e[1 + n + e[1 + l]]]] % 32, l = .6 - u * u - g * g - x * x - c * c, x = l < 0 ? 0 : (l *= l) * l * this.dot4(s[f], u, g, x, c), c = .6 - D * D - E * E - F * F - G * G, F = c < 0 ? 0 : (c *= c) * c * this.dot4(s[q], D, E, F, G), G = .6 - H * H - I * I - J * J - p * p, J = G < 0 ? 0 : (G *= G) * G * this.dot4(s[w], H, I, J, p), p = .6 - m * m - t * t - i * i - r * r, i = p < 0 ? 0 : (p *= p) * p * this.dot4(s[C], m, t, i, r), r = .6 - o * o - M * M - h * h - N * N, N = r < 0 ? 0 : (r *= r) * r * this.dot4(s[e], o, M, h, N); return 27 * (x + F + J + i + N) };